// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// deploy/staticresources/aro.openshift.io_clusters.yaml
// deploy/staticresources/master/deployment.yaml
// deploy/staticresources/master/rolebinding.yaml
// deploy/staticresources/master/service.yaml
// deploy/staticresources/master/serviceaccount.yaml
// deploy/staticresources/namespace.yaml
// deploy/staticresources/worker/deployment.yaml
// deploy/staticresources/worker/role.yaml
// deploy/staticresources/worker/rolebinding.yaml
// deploy/staticresources/worker/serviceaccount.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aroOpenshiftIo_clustersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x4d\x73\xe3\xc8\xcd\xbe\xeb\x57\xa0\xfc\x1e\x7c\x78\x2d\x79\xa6\x52\xa9\x4a\x74\xf3\xda\x3b\x13\xd5\xee\x78\x5c\xb6\x6b\xf6\xb0\xde\x03\xd8\x84\x28\xc4\xcd\x6e\x2e\x1a\x94\xad\x49\xe5\xbf\xa7\xba\x49\xea\xcb\xa4\x6c\x8d\x2b\x97\xe8\x32\xc3\xfe\x78\x00\x3c\x40\xa3\x81\xf6\x68\x3c\x1e\x8f\xb0\xe2\x6f\x24\x81\xbd\x9b\x02\x56\x4c\xcf\x4a\x2e\x7e\x85\xc9\xe3\xdf\xc2\x84\xfd\xf9\xf2\xe3\xe8\x91\x5d\x3e\x85\xcb\x3a\xa8\x2f\x6f\x29\xf8\x5a\x0c\x5d\xd1\x9c\x1d\x2b\x7b\x37\x2a\x49\x31\x47\xc5\xe9\x08\x00\x9d\xf3\x8a\x71\x38\xc4\x4f\x00\xe3\x9d\x8a\xb7\x96\x64\x5c\x90\x9b\x3c\xd6\x19\x65\x35\xdb\x9c\x24\x81\x77\xa2\x97\x1f\x26\x7f\x9d\x7c\x18\x01\x18\xa1\xb4\xfd\x9e\x4b\x0a\x8a\x65\x35\x05\x57\x5b\x3b\x02\x70\x58\xd2\x14\x8c\xad\x83\x92\x84\x09\x8a\x9f\xf8\x8a\x5c\x58\xf0\x5c\x27\xec\x47\xa1\x22\x13\x65\x16\xe2\xeb\x6a\x0a\x2f\xe6\x1b\x84\x56\xad\xd6\xa4\x06\x2c\x8d\x58\x0e\xfa\xcb\xf6\xe8\xaf\x1c\x34\xcd\x54\xb6\x16\xb4\x1b\xd1\x69\x30\xb0\x2b\x6a\x8b\xb2\x1e\x1e\x01\x04\xe3\x2b\xda\x46\x6d\xcd\x4b\x32\xc7\xad\x01\xcb\x8f\x68\xab\x05\x7e\x6c\x50\xcc\x82\x4a\x6c\x54\x02\x88\xea\x5e\xdc\xcc\xbe\xfd\xe5\x6e\x67\x18\x20\xa7\x60\x84\x2b\x4d\x54\xb5\xf0\xc0\x01\x74\x41\xd0\xac\x85\xb9\x97\xf4\xd9\x29\x09\x17\x37\xb3\xf5\xfe\x4a\x7c\x45\xa2\xdc\x59\xdf\xfc\xb6\x5c\xbf\x35\xba\x27\xed\x34\x2a\xd4\xac\x82\x3c\xfa\x9c\x1a\xb1\xad\x69\x94\xb7\x36\x80\x9f\x83\x2e\x38\x80\x50\x25\x14\xc8\x35\x51\xb0\x03\x0c\x71\x11\x3a\xf0\xd9\x3f\xc9\xe8\x04\xee\x48\x22\x0c\x84\x85\xaf\x6d\x1e\x43\x65\x49\xa2\x20\x64\x7c\xe1\xf8\xfb\x1a\x3b\x80\xfa\x24\xd4\xa2\x52\xeb\x94\xcd\x8f\x9d\x92\x38\xb4\xb0\x44\x5b\xd3\x19\xa0\xcb\xa1\xc4\x15\x08\x45\x29\x50\xbb\x2d\xbc\xb4\x24\x4c\xe0\x8b\x17\x02\x76\x73\x3f\x85\x85\x6a\x15\xa6\xe7\xe7\x05\x6b\x17\xf2\xc6\x97\x65\xed\x58\x57\xe7\x29\x7a\x39\xab\xd5\x4b\x38\xcf\x69\x49\xf6\x3c\x70\x31\x46\x31\x0b\x56\x32\x5a\x0b\x9d\x63\xc5\xe3\xa4\xba\x4b\x61\x3f\x29\xf3\xff\x93\xf6\x90\x84\xd3\x1d\x5d\x75\x15\xc3\x23\xa8\xb0\x2b\xb6\x26\x52\x2c\x1e\xf0\x40\x8c\xca\xe8\x6d\x6c\xb7\x36\x56\x6c\x88\x8e\x43\x91\x9d\xdb\x9f\xef\xee\xa1\x13\x9d\x9c\xb1\xcf\x7e\xe2\x7d\xb3\x31\x6c\x5c\x10\x09\x63\x37\x27\x69\x9c\x38\x17\x5f\x26\x4c\x72\x79\xe5\xd9\x69\x1b\x5b\x4c\x6e\x9f\xfe\x50\x67\x25\x6b\xf4\xfb\x9f\x35\x05\x8d\xbe\x9a\xc0\x65\xca\x03\x90\x11\xd4\x55\x8e\x4a\xf9\x04\x66\x0e\x2e\xb1\x24\x7b\x89\x81\xfe\xeb\x0e\x88\x4c\x87\x71\x24\xf6\x6d\x2e\xd8\x4e\x61\xfb\x8b\x1b\xd6\xb6\x26\xba\x44\x33\xe0\xaf\xf6\x7c\xde\x55\x64\x76\x4e\x4c\x4e\x81\x25\xc6\xb4\xa2\x52\x3c\x09\xdb\xd9\xa7\xfb\xf5\x9f\xd4\xf8\x43\x23\x57\xbe\x44\x76\xfb\x13\x83\x46\x41\x73\xc6\x67\x4e\x67\x37\xc7\x6d\xda\x62\xb7\x37\x43\x6c\xf6\xc7\xc3\x57\xec\xd9\x00\x80\xdf\x7f\x76\x4b\x16\xef\x4a\x72\x7a\x94\xe8\x0c\x9d\x23\x79\xb9\x65\x87\xe1\x9f\xd2\xa2\x35\xb9\x3c\x07\xec\xc6\xda\x54\x92\x51\xfc\xdf\x93\xeb\x12\x87\x49\x77\xd7\x0b\x3d\x0f\xf1\x0d\xed\xe5\xd5\x6b\xc1\x2b\x56\x0c\x86\x4e\x32\xe5\x78\x2f\xce\x09\xa3\x2f\x7a\x74\xdc\xe1\xe5\x53\xbb\x6c\x27\xf4\x2e\x6e\xbf\xc6\x8b\x45\x50\xbd\x74\x40\x50\xc4\x44\x7a\x24\x19\x31\x8d\x3a\xc3\x96\x2e\x2c\x89\xfe\x46\xd9\xc2\xfb\xc7\x43\xd4\x64\xde\x5b\xc2\xfd\x2b\x60\x07\xea\xa7\x01\x77\x1f\x05\x72\x75\x7d\xf7\x05\xc3\x9f\xef\x44\xf9\x4c\x8e\x96\xf8\xab\x2f\x0a\x76\xc5\x3b\xb1\xbe\x78\xc7\xea\xa3\x23\x2f\xbd\x9b\xf3\x7b\xe1\xae\xef\x3e\xf7\x7a\xe4\x18\x08\x9f\xd3\x95\x20\xbf\x9f\xed\x9b\xda\xda\x3b\x32\x42\x07\x8f\xc5\x1b\x80\x6e\x7d\xad\xf4\x89\x9f\xdf\x09\xf3\x9b\x97\x47\x14\x5f\xbb\x3c\x5c\xae\x6b\xcd\x1f\xc1\x3c\x70\x64\x8b\xc3\xb1\xf1\x6a\x12\x99\x73\x31\x98\x47\x13\x00\x6a\xac\x61\xa6\x70\xfa\xfb\x87\xf1\xdf\xff\xf8\xff\x49\xf3\xcf\xe9\xf1\x79\x07\xa0\x5c\xc7\xde\xe7\xcb\xbb\x0b\x63\x7c\x3d\x94\xc0\xc8\xd5\x65\xff\xcc\x38\x66\x8d\xae\x0c\xf6\x45\x98\x5d\xdf\xbf\x69\xdd\xcd\xed\xd7\xab\x37\x2d\x7c\xb7\x61\x07\xef\x97\xd7\x8c\xbb\x62\x2c\x9c\x0f\xca\x26\xdc\x88\xcf\x07\x56\xdd\xbf\x2c\x35\xbb\xa9\x4b\xfc\x84\x2c\x73\x7c\x7e\xb7\x1d\xd7\xb1\x25\xa9\xd0\xd0\xff\x80\x8b\x0e\x1c\x20\x76\x73\xc1\x59\x7e\xd4\xa5\xc7\xae\x10\x0a\xe1\xc8\xda\xa5\xe9\x06\x48\x2f\x17\x64\x1e\xfb\x12\xc1\xe1\xc3\x5a\x8b\x1d\x48\xb5\xac\x54\x0e\x4c\xbd\xea\xf2\x6e\x01\x8a\xe0\xea\x18\xde\xac\x37\xa9\x8d\x3a\x8a\x82\xae\x05\xe8\xe3\x7b\xa7\x5e\xe8\x7a\xf9\xd9\x55\xd7\x4c\x5e\x7c\x8f\xd5\xc1\x06\xa0\xe9\xea\x68\xab\xc7\x7d\xb3\x16\x4b\x47\x7a\x94\xc7\x87\xaa\x6d\x45\xad\xc3\x1b\xea\xed\xb4\x6e\xa7\xe2\xf6\x59\x88\xed\xcd\x0f\x97\xdc\xc6\xbb\x9c\xb7\xde\x32\x86\x55\x58\x2f\x6c\xfb\x34\xd2\x24\xad\x1b\x06\x76\x41\xd1\x19\x0a\x93\x17\x40\x83\x71\xb5\x23\xe1\x64\x83\xb5\x69\xdf\x9a\x5e\x3a\xda\x98\x82\x64\xa7\xbb\x3e\xed\x3f\xc0\x89\x89\xc9\xb6\xc2\x28\x14\x77\xad\x1f\x7e\xa0\x24\xb3\x40\xc7\xa1\x4c\x67\xc9\xe5\x94\xc7\x2a\x3a\xb6\x72\x81\xfa\x73\xe5\xd3\x82\x5c\xdb\xe2\x28\xb2\x0d\x6b\x45\x36\xaa\x45\x29\xb1\x23\x44\xa8\x84\xbd\x30\x3c\xba\x58\x9e\x7b\x81\xa7\x58\xb0\xf7\xc2\xa6\xf5\x55\x65\x57\x51\x3e\x5a\xbb\x61\x31\x09\x80\x82\x97\xe4\x20\x76\xc7\x13\x78\x70\xdb\x36\x35\x5d\x40\x2f\x68\x46\x80\x79\x6b\x13\x3d\x57\x96\x0d\xab\x5d\x35\x6f\x0f\xab\xad\x58\x00\x5d\xa0\x46\x93\x25\xa4\x17\x05\xe3\xcb\xca\xbb\xc8\x7a\x2f\xac\x49\x34\x66\xbe\x56\x10\xd4\x45\xea\xa3\xd1\xa5\xa6\x98\xa5\x69\xd0\x7d\xa0\x1d\xfc\xc4\x69\xea\xb9\x65\x80\xd7\xd4\x85\xfb\x84\xb6\xc5\x65\x98\xc0\x57\x67\xa8\x8d\xf4\xfc\x2c\x31\x5f\x12\xba\x28\x26\x11\xb3\x66\x62\x40\x55\x07\x6d\x73\x1e\x1d\x5d\x50\x0e\x28\x19\xab\xa0\xb0\x5d\xc1\x18\x38\xce\x19\x5f\x52\x80\x0a\x45\xbb\x1c\x70\x71\x33\x4b\x8f\x2b\xbd\xa0\x0b\x6c\x8e\x5c\xc0\x92\x20\x43\xf3\xf8\x84\x92\x87\x71\xa2\x6e\xee\xa5\xf9\x8a\x1c\xa2\x72\xc6\x96\x35\x51\x6e\x48\x5c\x74\x66\x2f\x24\xba\x55\x6b\xfc\x9e\x16\x93\x93\x9e\xf5\x87\xd3\x3a\x80\xc5\xa0\xf7\x82\x2e\x70\xf7\xba\x38\x94\xcb\xe7\x5e\x4a\xd4\x29\xe4\xa8\x34\x56\x2e\xe9\x47\x73\x7e\x49\x21\x60\x31\x28\xe7\xd5\xfd\x42\x18\x86\x2a\xc6\xa1\x04\x74\x9b\xf6\xc4\x2c\xb4\x77\x78\x11\xbc\xa3\xf1\x93\x97\xfc\x6c\xf3\x0e\x33\x00\x0d\x7b\x8f\x78\xeb\x5b\x00\x95\x0a\x2f\xab\xf8\x6d\xb0\x0e\xb4\x9e\xa8\x45\xc8\x69\x9b\xab\x5f\xe6\xb8\xee\x37\xd3\x1e\xcd\x62\x5a\x01\x76\x29\x1e\x38\x62\xd6\x5a\xd5\x7a\x06\xa1\x36\x0b\xc0\x90\xf4\xb6\xec\x86\x95\x7d\xac\x33\x32\x6a\xa1\x88\x59\xb7\xdd\x1c\xe3\x8e\x1d\x84\xba\x2c\x51\xf8\x7b\x3a\x1a\xa6\x51\xb3\xcd\x1f\xc9\x80\x41\x5d\x5f\x75\x4e\xdf\xb5\x74\xc4\xf6\xb4\xe0\x2d\x9e\xdd\x24\xfe\xfb\x55\x45\xdd\x3d\x1d\xb7\xaf\xc9\x5f\xdf\x0c\x43\x87\x33\xfe\xe2\xc6\x55\xc5\x06\xad\x5d\xc5\x14\xd1\x85\x40\x0e\x31\x26\x62\x22\x0e\x0b\x2f\x0a\xd5\x42\xd2\x03\xdd\x76\x42\x1d\x04\x4d\xcf\x6c\xdd\x9b\x0b\xbb\x9c\x63\x84\xb4\xb7\x2d\x37\x57\xc2\xc3\x09\x66\x2e\x9e\x28\x3b\x56\xa9\xe9\xe1\x04\x2a\x6f\x51\x58\x57\xc3\x61\xf2\xc9\x0b\xd0\x33\x96\x95\xa5\x33\xe0\x7d\x2b\x3b\x39\xa1\xb9\x77\x30\x02\xb2\x59\x35\x91\xb5\x44\xcb\xf9\xd9\xb0\xc2\x49\x23\x0e\x90\xd6\x3d\x9c\x80\xc1\x90\x48\xad\xc4\x67\x98\xc5\xab\x66\x11\x2f\x2a\x29\xcf\x20\xf8\x5d\xc1\x83\xa0\x9b\x37\xa7\xc8\x2e\xe5\xf0\x70\x32\x73\xad\x80\xde\x5c\x05\xaf\x47\x48\x73\x71\x50\x4f\xfd\x14\x2b\xf5\x26\xf8\x7a\xa7\x22\x6e\xcf\xc4\x81\x1a\xf3\x50\x71\xda\x3d\x1c\xbd\xf2\x0a\x38\x50\x86\xe6\xff\x40\xfd\x85\x56\xe1\xa6\xc9\x25\x2f\x77\x0f\xd6\x3e\x6f\xe8\x33\x5e\xaa\xdb\x6b\xe3\x8b\xc1\xa6\x24\x9c\x42\x8c\xc6\x66\x40\xbd\xc4\x34\xbd\x35\x52\x67\xeb\x17\xfc\x4e\xbb\xf6\xbc\xc3\xbf\xfe\x3d\xda\x1c\x7d\x34\x86\x2a\xa5\xfc\x7a\xff\x0f\x4b\x27\x8d\xdb\xbb\xbf\x1c\xa5\xcf\xad\x6a\x12\x7e\xff\x63\xd4\x08\xa6\xfc\x5b\xf7\x37\xa2\x38\xf8\x9f\x00\x00\x00\xff\xff\xbc\x2b\xb8\xf5\x93\x1b\x00\x00")

func aroOpenshiftIo_clustersYamlBytes() ([]byte, error) {
	return bindataRead(
		_aroOpenshiftIo_clustersYaml,
		"aro.openshift.io_clusters.yaml",
	)
}

func aroOpenshiftIo_clustersYaml() (*asset, error) {
	bytes, err := aroOpenshiftIo_clustersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "aro.openshift.io_clusters.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x53\xcd\x6e\xdb\x30\x0c\xbe\xfb\x29\x88\xde\xdd\xa4\x87\x01\x85\x6e\xc5\x1a\xf4\xb2\x15\xc5\xba\xee\xce\xc8\x6c\x2c\x54\x12\x35\x92\x0e\xea\x3e\xfd\x20\x24\x71\xec\x15\xc8\x0e\xd3\xc9\x20\x3f\x7e\x3f\x94\x8c\x25\xfc\x22\xd1\xc0\xd9\x01\x96\xa2\xab\xfd\x4d\xf3\x16\x72\xe7\xe0\x9e\x4a\xe4\x31\x51\xb6\x26\x91\x61\x87\x86\xae\x01\x88\xb8\xa5\xa8\xf5\x0b\xea\x80\x03\x14\x6e\xb9\x90\xa0\xb1\xb4\x09\xd5\x48\x1a\x80\x8c\x89\x2e\xf5\xb4\xa0\x27\x07\x5c\x28\x6b\x1f\x5e\xad\xc5\x8f\x41\x68\x02\x37\x5a\xc8\x57\x11\xa1\x12\x83\x47\x75\x70\xd3\x00\x28\x45\xf2\xc6\x72\x90\x4f\x68\xbe\xff\x36\xf3\x73\xd1\x91\x9a\xa0\xd1\x6e\x3c\x40\x85\x63\x0c\x79\xf7\x52\x3a\x34\x3a\x4d\x27\x7c\x7f\x1e\x64\x47\x07\xb1\x63\xe5\x25\xe3\x1e\x43\xc4\x6d\x24\x07\xeb\x06\xc0\x28\x95\x38\x4d\xcd\x77\x53\x4f\x5c\xf8\xb9\xe8\x08\xe0\x94\xb2\x1e\xcf\xd9\x30\x64\x92\x69\xb8\x05\xcf\x29\x61\xee\xce\x6c\x6d\xa5\x3a\x73\xcb\x4e\xe7\xbd\x69\x7b\xe7\xd2\x4c\xac\x9e\x90\xb0\xc6\x7b\xd8\x3c\x6e\x7e\xdc\xfd\xdc\xdc\x4f\x8d\xcf\xf7\x35\xb5\x84\x94\x07\xf1\x34\x93\x02\x88\x21\x05\x5b\x54\x00\x7c\x19\x1c\x7c\x59\xa7\x45\x31\x51\x62\x19\x6b\x7d\xfd\x3d\xcc\x3a\x42\xbf\x07\xd2\xff\xa0\x28\x2c\xb6\x48\x3f\x2d\xf0\x89\xc5\x1c\xdc\xae\x6f\xd7\x33\x9a\x43\xc0\xde\xac\x34\xe7\x0c\x7b\xca\xa4\xfa\x24\xbc\xa5\xb9\x8f\x8a\x7a\x20\x5b\x5a\x2b\x68\xbd\x83\x55\x4f\x18\xad\xff\x58\x09\x61\x37\x2e\x01\x7f\xcb\x66\xee\xe8\x79\xf1\x62\x4f\xd5\x56\x38\xd2\xf5\xdb\xb0\x25\xc9\x64\xa4\xd7\x81\x57\x87\x9b\x72\x70\x75\x75\x84\x2a\xc9\x3e\x78\xba\xf3\x9e\x87\x6c\x8f\x17\x7e\xa8\xcf\xe8\x4b\xc8\x22\x81\x25\xd8\xf8\x35\xa2\xea\x81\x56\x47\x35\x4a\xad\x8f\x43\xc5\xb5\x5e\x82\x05\x8f\xf1\x38\x60\x1c\x2b\x4f\xe0\x3c\x7b\x9a\x6f\x34\xba\x7f\x64\x99\x22\x9f\x7c\x38\xd8\xbc\x07\x35\x9d\x1a\xf4\xfa\x4a\xde\x1c\x3c\xf2\xb3\xef\xa9\x1b\x22\x35\x7f\x02\x00\x00\xff\xff\x06\x22\x0c\x74\x91\x04\x00\x00")

func masterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterDeploymentYaml,
		"master/deployment.yaml",
	)
}

func masterDeploymentYaml() (*asset, error) {
	bytes, err := masterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x4e\x03\x31\x0c\x40\x77\x7f\x85\x7f\x20\x87\xd8\x50\x36\x60\x60\x2f\x12\xbb\x9b\xb8\xd4\xf4\x62\x47\x8e\xd3\xa1\x5f\x8f\xaa\xa2\x5b\x90\x6e\xb5\xdf\xf3\x33\x75\xf9\x62\x1f\x62\x9a\xd1\x8f\x54\x16\x9a\x71\x36\x97\x1b\x85\x98\x2e\x97\x97\xb1\x88\x3d\x5d\x9f\xe1\x22\x5a\x33\xbe\xaf\x73\x04\xfb\xc1\x56\x7e\x13\xad\xa2\xdf\xd0\x38\xa8\x52\x50\x06\x44\xa5\xc6\x19\xc9\x2d\x59\x67\xa7\x30\x4f\x8d\xee\x02\xb8\xad\x7c\xe0\xd3\x1d\xa2\x2e\x1f\x6e\xb3\xef\x04\x01\xf1\x5f\x6f\x3b\x5f\x1e\xb3\x44\xb5\x89\xc2\x98\xc7\x1f\x2e\x31\x32\xa4\x3f\xe7\x93\xfd\x2a\x85\x5f\x4b\xb1\xa9\xb1\xfb\xd5\x63\x37\x3a\x15\xce\x68\x9d\x75\x9c\xe5\x14\x89\x6e\xd3\x79\x83\xe1\x37\x00\x00\xff\xff\x4f\x98\xa4\x7c\x24\x01\x00\x00")

func masterRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterRolebindingYaml,
		"master/rolebinding.yaml",
	)
}

func masterRolebindingYaml() (*asset, error) {
	bytes, err := masterRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x41\xca\xc2\x40\x0c\x46\xf7\x73\x8a\x5c\x60\xa0\xff\xae\xcc\x29\x7e\x10\xdc\x87\xe9\xa7\x1d\xb4\x93\x90\xc4\x2e\x3c\xbd\xd4\x16\x5d\xb9\x0b\xef\x7b\xbc\xb0\xb6\x33\xcc\x9b\xf4\x42\xeb\x5f\xba\xb5\x3e\x15\x3a\xc1\xd6\x56\x91\x16\x04\x4f\x1c\x5c\x12\x51\xe7\x05\x85\xd8\x24\x8b\xc2\x38\xc4\xf2\xc2\x1e\xb0\x63\x73\xe5\x8a\x42\xa2\xe8\x3e\xb7\x4b\x64\x7e\x3e\x0c\x1f\x39\xb9\xa2\x6e\x1d\xc7\x1d\x35\xc4\xb6\x9b\x88\x55\x7f\x45\x55\x2c\x7c\xb7\xf2\xf1\x7d\x8e\xd0\x37\xd8\xd7\x42\xe3\x30\x0e\x07\x08\xb6\x2b\xe2\xff\x8b\x5f\x01\x00\x00\xff\xff\x10\x70\xf6\x36\xda\x00\x00\x00")

func masterServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceYaml,
		"master/service.yaml",
	)
}

func masterServiceYaml() (*asset, error) {
	bytes, err := masterServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8e\x02\x31\x0c\x05\xd0\x3e\xa7\xf0\x05\x52\x6c\xeb\x6e\xcf\x80\x44\xff\x95\xf9\x08\x0b\xc5\x8e\x1c\xcf\x14\x9c\x9e\x06\x51\xbf\x87\x65\x77\xe6\xb6\x70\x95\xeb\xaf\xbd\xcc\x0f\x95\x1b\xf3\xb2\xc1\xff\x31\xe2\xf4\x6a\x93\x85\x03\x05\x6d\x22\x8e\x49\x15\x64\xf4\x58\x4c\x54\x64\x9f\xd8\xc5\xfc\xda\x5e\x18\x54\x89\x45\xdf\x4f\x7b\x54\xc7\xfb\x4c\xfe\x72\xfb\x04\x00\x00\xff\xff\xe4\xf5\x04\x25\x70\x00\x00\x00")

func masterServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceaccountYaml,
		"master/serviceaccount.yaml",
	)
}

func masterServiceaccountYaml() (*asset, error) {
	bytes, err := masterServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _namespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x58\xd7\x07\x44\x9b\x21\x28\xe9\xbf\x2e\x1f\x61\x41\xec\x28\x36\x14\x4c\x8f\xa8\xae\x7f\x98\x7a\xe3\x0a\x75\x6b\xf2\xb9\x94\xa7\x5a\x6f\x72\xc5\x60\x4c\xec\x2c\x83\x89\x8e\x44\x2b\x22\x86\xc1\x26\x3e\x69\xf1\xd0\x7b\x56\x7c\xdf\x8b\xd5\x27\x17\xd2\x57\x11\x81\x99\x27\x52\xdd\xe2\xef\xe5\xb0\x27\xf5\xb3\x79\x67\x0d\xbe\xb8\xa7\xaf\x26\xdb\x56\x7e\x01\x00\x00\xff\xff\xc1\xaf\xa6\x4c\x7c\x00\x00\x00")

func namespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_namespaceYaml,
		"namespace.yaml",
	)
}

func namespaceYaml() (*asset, error) {
	bytes, err := namespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x53\x3d\x6f\xdb\x50\x0c\xdc\xf5\x2b\x88\xec\x8a\xed\x2d\xd0\x16\x34\x46\x96\x36\x28\x9a\xa6\x3b\xfd\x74\xb5\x1e\xfc\xbe\x4a\x52\x6e\x95\x5f\x5f\x08\xb6\x65\x09\x01\xbc\x84\x93\x70\x77\xbc\x23\x29\x89\x8b\xff\x05\x51\x9f\x53\x43\x5c\x8a\xae\x8e\x9b\xea\xe0\x53\xdb\xd0\x13\x4a\xc8\x43\x44\xb2\x2a\xc2\xb8\x65\xe3\xa6\x22\x0a\xbc\x43\xd0\xf1\x89\xc6\x86\x86\x58\x72\x9d\x0b\x84\x2d\x4b\xfd\x37\xcb\x01\x52\x11\x25\x8e\xb8\xc5\x69\x61\x87\x86\x72\x41\xd2\xce\xff\xb6\x9a\xdf\x7b\xc1\x24\xae\xb4\xc0\x8d\x21\x82\x12\xbc\x63\x6d\x68\x53\x11\x29\x02\x9c\x65\x39\xc5\x47\x36\xd7\x7d\x9d\xcd\x73\x73\x22\x35\x61\xc3\x7e\x38\x49\x25\x87\xe0\xd3\xfe\xad\xb4\x6c\xb8\x74\x47\xfe\xf7\xda\xcb\x1e\xa7\xb0\x33\xf2\x96\xf8\xc8\x3e\xf0\x2e\xa0\xa1\x75\x45\x64\x88\x25\x4c\x5d\xf3\xdb\x8c\x15\x16\xf3\xdc\x9c\x88\xe8\xb2\xe5\x58\x2e\x27\x63\x9f\x20\x53\x73\x4d\x2e\xc7\xc8\xa9\xbd\xba\xd5\xa3\xd5\xd5\x5b\xf6\x3a\xe7\xa6\xeb\x5d\xa1\x59\xd8\x58\x3e\xf2\xb8\xde\xf3\xf6\x65\xfb\xe3\xf1\xe7\xf6\x69\x22\x3e\xbe\xaf\x89\x12\x68\xee\xc5\x61\x16\x45\x14\x7c\xf4\xb6\x40\x88\x5c\xe9\x1b\xda\xac\xe3\x02\x8c\x88\x59\x86\x11\x5f\x7f\xf3\x33\x46\xf0\xa7\x87\x7e\xc2\x22\xf8\x23\x12\x54\xbf\x4b\xde\x61\xee\xd2\x99\x95\x67\xd8\xd2\xb8\xb0\x75\x0d\xad\x3a\x70\xb0\xee\x7d\x25\xe0\x76\x58\x0a\xb2\x58\x43\x0f\xeb\x87\xf5\x19\x4e\xb9\xc5\xeb\xe2\x7b\xbb\xa0\xb5\xe4\x80\xfb\x43\xbf\x83\x24\x18\xf4\xde\xe7\xd5\xe9\xce\x0d\xdd\xdd\x9d\xa5\x0a\x39\x7a\x87\x47\xe7\x72\x9f\xec\xe5\xc6\xef\xf0\x51\x7d\x4b\x59\xc4\x67\xf1\x36\x7c\x09\xac\x7a\xb2\xd5\x41\x0d\xb1\x76\xa1\x57\x83\xd4\x4e\xbc\x79\xc7\xa1\xfa\x1f\x00\x00\xff\xff\xc7\xb2\x22\x9e\xdc\x03\x00\x00")

func workerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerDeploymentYaml,
		"worker/deployment.yaml",
	)
}

func workerDeploymentYaml() (*asset, error) {
	bytes, err := workerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\xb1\x6e\x2c\x31\x08\x45\x7b\xbe\x82\x1f\xb0\x57\xaf\x7b\x72\x9b\x22\x7d\x14\xa5\x67\x3d\x24\x83\xc6\x63\x2c\xc0\xbb\x52\xbe\x3e\x9a\xd9\x6d\x53\xa5\xe2\x0a\x1d\x0e\x17\x52\x4a\x40\x43\x3e\xd8\x5c\xb4\x17\xb4\x2b\xd5\x4c\x33\x56\x35\xf9\xa6\x10\xed\x79\xfb\xef\x59\xf4\x72\xfb\x07\x9b\xf4\xa5\xe0\x4b\x9b\x1e\x6c\x6f\xda\x18\x76\x0e\x5a\x28\xa8\x00\x62\x35\x3e\x0f\xde\x65\x67\x0f\xda\x47\xc1\x3e\x5b\x03\xc4\x4e\x3b\x17\x24\xd3\xa4\x83\x8d\x42\x2d\xdd\xd5\x36\x36\xb0\xd9\xd8\x0b\x24\xa4\x21\xaf\xa6\x73\xf8\x61\x4a\x07\x9b\x75\x70\xf7\x55\x3e\x23\x8b\x02\xa2\xb1\xeb\xb4\xca\x4f\xa2\x3e\x5a\x38\x20\xde\xd8\xae\xcf\xed\x17\xc7\x39\x9b\xf8\x23\xdc\x29\xea\xfa\x17\xff\xc5\x83\x62\xfe\xf2\x66\x9c\xf6\x23\xcd\xb1\x50\x30\xfc\x04\x00\x00\xff\xff\x30\x78\x19\x41\x50\x01\x00\x00")

func workerRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRoleYaml,
		"worker/role.yaml",
	)
}

func workerRoleYaml() (*asset, error) {
	bytes, err := workerRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x17\x90\x8b\x6e\x85\xb6\xb6\x43\x77\x17\xe8\x4e\xcb\x74\xcd\xda\x26\x05\x8a\x72\x01\x9f\x3e\x08\x12\x64\x09\xe0\xf9\xbf\xf7\x1f\x16\xfe\x21\xab\xac\x92\xc0\x06\xcc\x1d\x36\x9f\xd5\xf8\x40\x67\x95\x6e\x79\xab\x1d\xeb\xcb\xfe\x1a\x16\x96\x31\xc1\xe7\xda\xaa\x93\xf5\xba\xd2\x07\xcb\xc8\xf2\x1b\x36\x72\x1c\xd1\x31\x05\x00\xc1\x8d\x12\xa0\x69\xd4\x42\x86\xae\x16\xff\xd5\x16\xb2\x60\xba\x52\x4f\xd3\x15\xc2\xc2\x5f\xa6\xad\x9c\x04\x03\xc0\x53\xef\xf4\xbe\xb6\xe1\x8f\xb2\xd7\x14\xe2\xdd\xfc\x26\xdb\x39\xd3\x7b\xce\xda\xc4\x4f\xe5\xdb\x56\x0b\x66\x4a\xa0\x85\xa4\xce\x3c\x79\xc4\xa3\x19\x3d\xe0\x70\x09\x00\x00\xff\xff\x73\xce\x57\x9b\x2a\x01\x00\x00")

func workerRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRolebindingYaml,
		"worker/rolebinding.yaml",
	)
}

func workerRolebindingYaml() (*asset, error) {
	bytes, err := workerRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8a\xc3\x40\x0c\x05\xd0\x7e\x4e\xa1\x0b\x4c\xb1\xad\xba\x3d\x43\x20\xfd\x67\xfc\x43\x84\xb1\x34\x68\x64\x07\x72\xfa\x34\x21\xf5\x7b\x98\x76\x67\x2e\x0b\x57\xb9\xfe\xda\x6e\xbe\xa9\xdc\x98\x97\x0d\xfe\x8f\x11\xa7\x57\x3b\x58\xd8\x50\xd0\x26\xe2\x38\xa8\x82\x8c\x1e\x93\x89\x8a\xec\xaf\xc8\x9d\xf9\xb5\x35\x31\xa8\x12\x93\xbe\x9e\xf6\xa8\x8e\xf7\x99\xfc\xe5\xf6\x09\x00\x00\xff\xff\xe3\x3c\x43\x66\x70\x00\x00\x00")

func workerServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerServiceaccountYaml,
		"worker/serviceaccount.yaml",
	)
}

func workerServiceaccountYaml() (*asset, error) {
	bytes, err := workerServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"aro.openshift.io_clusters.yaml": aroOpenshiftIo_clustersYaml,
	"master/deployment.yaml":         masterDeploymentYaml,
	"master/rolebinding.yaml":        masterRolebindingYaml,
	"master/service.yaml":            masterServiceYaml,
	"master/serviceaccount.yaml":     masterServiceaccountYaml,
	"namespace.yaml":                 namespaceYaml,
	"worker/deployment.yaml":         workerDeploymentYaml,
	"worker/role.yaml":               workerRoleYaml,
	"worker/rolebinding.yaml":        workerRolebindingYaml,
	"worker/serviceaccount.yaml":     workerServiceaccountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"aro.openshift.io_clusters.yaml": {aroOpenshiftIo_clustersYaml, map[string]*bintree{}},
	"master": {nil, map[string]*bintree{
		"deployment.yaml":     {masterDeploymentYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {masterRolebindingYaml, map[string]*bintree{}},
		"service.yaml":        {masterServiceYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {masterServiceaccountYaml, map[string]*bintree{}},
	}},
	"namespace.yaml": {namespaceYaml, map[string]*bintree{}},
	"worker": {nil, map[string]*bintree{
		"deployment.yaml":     {workerDeploymentYaml, map[string]*bintree{}},
		"role.yaml":           {workerRoleYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {workerRolebindingYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {workerServiceaccountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
